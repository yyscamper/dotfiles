#STARTFGCOLOR="\[\e[0;36m\]";
#STARTBGCOLOR=""  #"\e[47m"
#ENDCOLOR="\[\e[0m\]"
#export PS1="$STARTFGCOLOR$STARTBGCOLOR\u@\w>$ENDCOLOR "

stty -ixon
export PATH=$PATH:~/src/npm/bin:/Users/mdt/Applications/npm/bin
export TERM="screen-256color"
export GOROOT=/usr/local/Cellar/go/1.9.1/libexec
# export TERM=

#old vim
alias ovim='/usr/local/bin/vim'

alias vim='nvim'
alias valias="vim $HOME/.bash-alias"
alias salias="source $HOME/.bash-alias"
alias vzsh="vim $HOME/.zshrc"
alias szsh="source $HOME/.zshrc"

#MDT
GOWORKSPACE=${HOME}/golang/workspace
GOLIB=${HOME}/golang/lib
alias vbeep="cd ${GOWORKSPACE}/src/beep && vim main.go"
alias vd="cd ~/src/datamap && vim app.py"
alias vp="cd ~/src/petal && vim petal.py"
alias dm="cd ~/src/datamap"
alias sshtb="ssh yuanyu@140.206.48.66"
alias sshvm="ssh yuanyu@192.168.1.22"
alias sshauto="ssh-add ~/.ssh/id_rsa"
alias cdlogrus="cd ${GOLIB}/src/github.com/yyscamper/logrus"
alias cdspew="cd ${GOLIB}/src/github.com/yyscamper/go-spew"

# git alias
alias gl="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit -n10"
alias glg="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit"
alias gs="git status"
alias gm="git commit -m "
alias gd="git diff --color"
alias gdc="git diff --cached"
alias gb="git branch"
alias glog="git log"
alias ga="git add"
alias gr="git rm"
alias gpo="git push origin"
alias gfu="git fetch upstream"
alias gfo="git fetch origin"
alias gru="git rebase upstream/master"
alias gro="git rebase origin/master"
alias gc="git checkout"
alias grma="git rm $(git ls-files --deleted)"

#onrack alias
alias ni="sudo node index.js --color"
alias nid="sudo node --debug index.js --color"
alias mt="mocha \$(find spec -name '*-spec.js') -R spec --require spec/helper.js"
alias jc="jshint -c .jshintrc lib index.js"
alias mst="sudo /opt/onrack/bin/monorail status"
alias ms="sudo /opt/onrack/bin/monorail restart"
alias mp="sudo /opt/onrack/bin/monorail stop && sudo service isc-dhcp-server start"

#general alias
alias la="ls -alh"
alias c="clear"
alias l="ls"
alias less="less -R"
alias v="vim"
alias ~="cd ~"
alias df="df -kh"
alias du="du -kh"
alias mkdir="mkdir -p"

# alias .="cd .."
# alias ..="cd ../.."
# alias ...="cd ../../.."
# alias ....="cd ../../../.."
alias mproc="ps -aux | grep index"
alias apti="sudo apt-get install"
alias apts="apt-cache search"
alias h="history"
alias jcd="jshint .jshintrc \$(git diff --name-only)"
alias jcdc="jshint .jshintrc \$(git diff --name-only --cached)"

#open file alias
alias vnet="vim /etc/network/interfaces"
alias vsmb="vim /etc/samba/smb.conf"
alias vdhcp="vim /var/lib/dhcp/dhcpd.leases"
alias vbash="vim ~/.mybash"
alias sbash="source ~/.bashrc"
alias vvim="vim ~/.vimrc"
alias vv="vim ~/.vimrc"
alias lap="sudo vim /var/log/apache2/error.log"
alias lhttp="sudo vim /var/log/upstart/on-http.log"
alias lgraph="sudo vim /var/log/upstart/on-taskgraph.log"
alias lgf="sudo vim /var/log/upstart/on-taskgraph.log"
alias ltftp="sudo vim /var/log/upstart/on-tftp.log"
alias ldhcp="sudo vim /var/log/upstart/on-dhcp-proxy.log"
alias lcond="sudo vim /var/log/upstart/onrack-conductor.log"

#change directory alias
alias cd-="cd -"
alias cd.="cd .."
alias cd..="cd .."
alias cdbeep="cd ~/golang/workspace/src/beep"
alias cdgo="cd ~/golang/workspace/src/"
alias cdgolib="cd ~/golang/lib/src/"

#vim open project
alias vcore="cdcore && vim ~/src/on-core/index.js"
alias vdhcp="cddhcp && vim ~/src/on-dhcp-proxy/index.js"
alias vgraph="cdgraph && vim ~/src/on-taskgraph/index.js"
alias vgf="cdgraph && vim ~/src/on-taskgraph/index.js"
alias vhttp="cdhttp && vim ~/src/on-http/index.js"
alias vtftp="cdtftp && vim ~/src/on-tftp/index.js"
alias vserve="cdserve && vim ~/src/onserve/onserve/views/redfish_0_96_0/views.py"
alias vse="vserve"
alias vtask="cdtask && vim ~/src/on-tasks/index.js"
alias vtest="cdtest && vim /home/onrack/src/RackHD/test/run.py"

#service
alias sdhcp="sudo service on-dhcp-proxy restart"
alias sdhcpp="sudo service on-dhcp-proxy stop"
alias shttpp="sudo service on-http stop"
alias shttp="sudo service on-http restart"
alias sgf="sudo service on-taskgraph restart"
alias sgfp="sudo service on-taskgraph stop"
alias sgraph="sudo service on-taskgraph restart"
alias sgraphp="sudo service on-taskgraph stop"
alias stftp="sudo service on-tftp restart"
alias stftpp="sudo service on-tftp stop"
alias smos="sudo /opt/onrack/bin/monorail status"
alias smo="sudo /opt/onrack/bin/monorail restart"
alias smop="sudo /opt/onrack/bin/monorail stop"
alias sserve="sudo service onrack-conductor restart && sudo service apache2 restart"
alias sse="sudo service onrack-conductor restart && sudo service apache2 restart"
alias ssep="sudo service onrack-conductor stop"
alias sservep="sudo service onrack-conductor stop"

#foreman
alias nfs="nf -j ~/Procfile -e ~/.env start"

alias pm2="sudo pm2"

#tmux
alias tmux="tmux -2"

#pm2
alias pmrackhd="sudo pm2 ~/src/rackhd-services.yml"

#find port
function fp() {
    sudo netstat -apn | grep $1
}

function ipmi() {
    ipmitool -I lanplus -U $1 -P $2 -H $3 $4 $5 $6 $7 $8 $9
}

#ipmicommand for vbmc
function vipmi() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 $2 $3 $4 $5 $6 $7 $8 $9
}

function vchassis() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis $2 $3 $4 $5 $6
}

function vpxe() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis bootdev pxe
}

function von() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power on
}

function voff() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power off
}

function vreboot() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power cycle
}

function vcycle() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power cycle
}

function lkp() {
    http http://localhost:8080/api/2.0/lookups?q=$1
}

function m() {
    if [ $# -ge 2 ]
    then
      if [ $1 == post ]
      then
        http POST http://localhost:8080/api/2.0/$2 $3 $4 $5 $6 $7 $8
      else
        http $1 http://localhost:8080/api/2.0/$2 $3 $4 $5 $6 $7 $8

      fi
    else
        http -b http://localhost:8080/api/2.0/$1 $2 $3 $4 $5 $6
    fi
}

function mpost() {
    http POST http://localhost:8080/api/2.0/$1 < $2 $3 $4 $5 $6 $7 $8
}

function mput() {
    http PUT http://localhost:8080/api/2.0/$1 < $2 $3 $4 $5 $6 $7 $8
}

function mdel() {
    http DELETE http://localhost:8080/api/2.0/$1 $2 $3 $4 $5 $6 $7 $8
}

function nodes() {
    if [ $# == 0 ]; then
        http GET http://localhost:8080/api/2.0/nodes
    else
        http GET http://localhost:8080/api/2.0/nodes/$1
    fi
}

function skus() {
    if [ $# == 0 ]; then
        http GET http://localhost:8080/api/2.0/skus
    else
        http GET http://localhost:8080/api/2.0/skus/$1
    fi
}

function pollers() {
    if [ $# == 0 ]; then
        http GET http://localhost:8080/api/2.0/pollers
    else
        http GET http://localhost:8080/api/2.0/pollers/$1
    fi
}

function rmnode() {
    if [ $1 == 'all' ]; then
    for nodeId in $(http :8080/api/2.0/nodes | jq '.[].id');do
        nodeId=${nodeId//\"/}
        echo deleting node $nodeId
        http DELETE :8080/api/2.0/nodes/$nodeId
        done
    else
        echo deleting node $1
        http DELETE :8080/api/2.0/nodes/$1
    fi
}

alias rmn="rmnode"

function rmlookup() {
    if [ $1 == 'all' ]; then
    for id in $(http :8080/api/2.0/lookups | jq '.[].id');do
        id=${id//\"/}
        http DELETE :8080/api/2.0/lookups/$id
        done
    else
        http DELETE :8080/api/2.0/lookups/$1
    fi
}
alias rmlkp="rmlookup"

function addobm() {
    if [ $# != 4 ]; then
        echo 'Invalid command, usage: addobm <nodeId> <ipmiHost> <ipmiUser> <ipmiPassword>'
    else
        echo Generating ipmi-obm-setting: nodeId=$1 BMC=$2 User=$3 Password=$4:
        echo "{\"service\": \"ipmi-obm-service\", \"config\": { \"host\": \"$2\", \"user\": \"$3\", \"password\": \"$4\" }, \"nodeId\": \"$1\"}" | http PUT :8080/api/2.0/obms
    fi
}

function runwf() {
    if [ $# -lt 2 ]; then
        echo 'Invalid command, runwf <nodeId> <graphName> [optionFileName]'
    elif [ $# -eq 2 ]; then
        echo Run workflow $2 at node $1 with no options.
        http POST :8080/api/2.0/nodes/$1/workflows?name=$2
    elif [ $# -eq 3 ]; then
        echo Run workflow $2 at node $1 with option $3.
        http POST :8080/api/2.0/nodes/$1/workflows?name=$2 < $3
    fi
}

function actwf() {
    if [ $# -lt 1 ]; then
        echo 'Invalid command, actwf <nodeId>'
    else
        http :8080/api/2.0/nodes/$1/workflows?active=true
    fi
}

function stopwf() {
    if [ $# != 1 ]; then
        echo 'Invalid command, stopwf <nodeId>'
    else
        echo stop the active workflow of node $1
        http PUT :8080/api/2.0/nodes/$1/workflows/action command=cancel
    fi
}

function stopwfraw() {
    if [ $# != 1 ]; then
        echo 'Invalid command, stopwfraw <graphInstanceId>'
    else
        echo stop the workflow with instanceId=$1
        http PUT :8080/api/2.0/workflows/$1/action command=cancel
    fi
}

function o() {
    echo http GET https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 -b --verify=no
    http GET https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 -b --verify=no
}

function opost() {
    echo http POST https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 -b --verify=no
    http POST https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 --verify=no
}

function oauth() {
    http POST https://localhost/login email=admin password=admin123 $1 $2 $3 $4 $5 $6 --verify=no
}

function vtun() {
    echo create tunnel for 172.31.128.$1 on port 5901
    socat -d -d TCP4-LISTEN:5901,reuseaddr,fork TCP4:172.31.128.$1:5901
}

function tun() {
    echo craete tunnel from port $1 to port $2
    sudo socat -d -d TCP4-LISTEN:$2,reuseaddr,fork TCP4:127.0.0.1:$1
}

function reposync() {
    USAGE="Usage: $0 repository-name"
    if [ $# == 0 ]; then
        echo "$USAGE"
        exit 1
    fi

#    while (( $# )); do
        # repo = $1
        # if [ $1 == serve ]; then
        #      repo = "on$1"
        # else
        #      repo = "on-$1"
        # fi
        # echo "repo=$repo"
        #
        echo "syncing repository $1 ..."
        cd ~/src/$1
        # if [ $1 == serve ]; then
        #     cd ~/src/on$1
        # else
        #     cd ~/src/on-$1
        # fi

        #cd ~/src/$repo
        git checkout master
        git fetch upstream
        git merge upstream/master
        git push origin master
        echo "syncing repository done."
#    shift
#    done
}

function ut() {
    mocha $1 -R spec --require spec/helper.js
}

function sor() {
    ssh onrack@s$1.or
}

function ss() {
    ssh onrack@$1
}

func proxyon() {
    export http_proxy=http://localhost:8123
    export https_proxy=http://localhost:8123
    export ftp_proxy=http://localhost:8123
}

func proxyoff() {
    export http_proxy=
    export https_proxy=
    export ftp_proxy=
}

func homebrew_restore() {
    cd "$(brew --repo)"
    git remote set-url origin https://github.com/Homebrew/brew.git

    cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
    git remote set-url origin https://github.com/Homebrew/homebrew-core.git
}

func homebrew_setup() {
    cd "$(brew --repo)"
    git remote set-url origin https://mirrors.ustc.edu.cn/brew.git

    cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
    git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git
}


